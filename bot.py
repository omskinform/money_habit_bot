import logging
import os
import json
import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(name)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TOKEN")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∏–∑ tasks.json
with open("tasks.json", "r", encoding="utf-8") as f:
    daily_tasks = json.load(f)

# –§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = "user_data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def load_user_data():
    if not os.path.exists(USER_DATA_FILE):
        return {}
    with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

user_data = load_user_data()

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
def get_progress_bar(day):
    total = len(daily_tasks)
    bar = "üü©" * day + "‚¨ú" * (total - day)
    return f"{bar} ({day}/{total})"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"day": 0, "completed": [], "goal": None}
        save_user_data(user_data)
    keyboard = [["/next", "/progress"], ["/reset", "/goal 50000"]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂ ¬´–ü—Ä–∏–≤—ã—á–∫–∞ –∫–æ–ø–∏—Ç—å¬ª!\n–ù–∞–∂–∏–º–∞–π /next, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /next
async def next_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = user_data.get(user_id, {"day": 0, "completed": [], "goal": None})
    if data["day"] >= len(daily_tasks):
        await update.message.reply_text("üéâ –ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ 21 –¥–µ–Ω—å!")
        return
    task = daily_tasks[data["day"]]
    await update.message.reply_text(f"{task}")
    data["day"] += 1
    data["completed"].append(True)
    user_data[user_id] = data
    save_user_data(user_data)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /progress
async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = user_data.get(user_id, {"day": 0, "completed": [], "goal": None})
    day = data["day"]
    bar = get_progress_bar(day)
    await update.message.reply_text(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n{bar}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /goal
async def set_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    try:
        goal = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /goal 50000")
        return
    user_data[user_id]["goal"] = goal
    save_user_data(user_data)
    await update.message.reply_text(f"‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal} —Ä—É–±.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data[user_id] = {"day": 0, "completed": [], "goal": None}
    save_user_data(user_data)
    await update.message.reply_text("üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /next")

# –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–î–∞/–ù–µ—Ç)
async def evening_check(context: ContextTypes.DEFAULT_TYPE):
    for user_id in user_data:
        await context.bot.send_message(
            chat_id=int(user_id),
            text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è?\n–ù–∞–∂–º–∏ /next, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç.",
        )

# –ü–ª–∞–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–Ω–∞ 7, 14, 21 –¥–Ω–∏)
async def scheduled_progress(context: ContextTypes.DEFAULT_TYPE):
    for user_id, data in user_data.items():
        day = data.get("day", 0)
        if day in [7, 14, 21]:
            bar = get_progress_bar(day)
            await context.bot.send_message(
                chat_id=int(user_id),
                text=f"üìà –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª {day} –¥–Ω–µ–π!\n–í–æ—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n{bar}",
            )

# –ó–∞–ø—É—Å–∫
if name == "main":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_task))
    app.add_handler(CommandHandler("progress", progress))
    app.add_handler(CommandHandler("goal", set_goal))
    app.add_handler(CommandHandler("reset", reset))

    scheduler = BackgroundScheduler()
    scheduler.add_job(
        lambda: app.create_task(evening_check(app.bot)),
        CronTrigger(hour=17, minute=0),  # –ü–æ UTC, 20:00 –ú–°–ö
    )
    scheduler.add_job(
        lambda: app.create_task(scheduled_progress(app.bot)),
        CronTrigger(hour=6, minute=0),  # 09:00 –ú–°–ö
    )
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
