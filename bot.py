import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# -------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥
# -------------------------------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")  # –±–µ—Ä—ë—Ç—Å—è –∏–∑ GitHub Secrets

TASKS_FILE = "tasks.json"
USERS_FILE = "users.json"

# -------------------------------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------------------------------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
# -------------------------------------------------------------------
def load_json(path: str) -> dict:
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_json(path: str, data: dict):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# -------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã Telegram-–∫–æ–º–∞–Ω–¥
# -------------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_chat.id)
    users = load_json(USERS_FILE)
    if uid not in users:
        users[uid] = {"day": 0, "goal": None, "completed_days": []}
        save_json(USERS_FILE, users)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–ü—Ä–∏–≤—ã—á–∫–∞ –∫–æ–ø–∏—Ç—å¬ª. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ú–°–ö "
        "—è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/next ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
        "/progress ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/goal <—Å—É–º–º–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"
    )

async def next_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_chat.id)
    users = load_json(USERS_FILE)
    tasks = load_json(TASKS_FILE)
    day = users[uid]["day"]
    if day < len(tasks):
        text = tasks[day]
        users[uid]["day"] += 1
    else:
        text = "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ 21 –∑–∞–¥–∞–Ω–∏–µ!"
    save_json(USERS_FILE, users)
    await update.message.reply_text(text)

async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_chat.id)
    users = load_json(USERS_FILE)
    total = len(load_json(TASKS_FILE))
    day = users[uid]["day"]
    done = len(users[uid]["completed_days"])
    bar = "üü©" * done + "‚¨ú" * (total - done)
    await update.message.reply_text(
        f"–í—ã –Ω–∞ –¥–Ω–µ {day} –∏–∑ {total}\n–ü—Ä–æ–≥—Ä–µ—Å—Å:\n{bar} {done}/{total}"
    )

async def set_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_chat.id)
    args = context.args
    if not args or not args[0].isdigit():
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /goal 50000")
    goal = int(args[0])
    users = load_json(USERS_FILE)
    users[uid]["goal"] = goal
    save_json(USERS_FILE, users)
    await update.message.reply_text(f"–¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal} ‚ÇΩ.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_chat.id)
    users = load_json(USERS_FILE)
    users[uid] = {"day": 0, "goal": None, "completed_days": []}
    save_json(USERS_FILE, users)
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.")

# -------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ ¬´‚úÖ –°–¥–µ–ª–∞–Ω–æ¬ª / ¬´‚ùå –ù–µ —Å–¥–µ–ª–∞–Ω–æ¬ª
# -------------------------------------------------------------------
async def answer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.message.chat.id)
    data = query.data  # 'done' –∏–ª–∏ 'skip'
    users = load_json(USERS_FILE)
    day = users[uid]["day"]
    if data == "done" and day not in users[uid]["completed_days"]:
        users[uid]["completed_days"].append(day)
    save_json(USERS_FILE, users)
    result = "‚úÖ –°–¥–µ–ª–∞–Ω–æ" if data == "done" else "‚ùå –ù–µ —Å–¥–µ–ª–∞–Ω–æ"
    await query.edit_message_text(f"{query.message.text}\n\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {result}")

# -------------------------------------------------------------------
# –ê–≤—Ç–æ‚Äë–∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
# -------------------------------------------------------------------
async def send_daily():
    """–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ 9:00 –ú–°–ö (06:00 UTC)."""
    users = load_json(USERS_FILE)
    tasks = load_json(TASKS_FILE)
    global app
    for uid, info in users.items():
        day = info["day"]
        if day < len(tasks):
            try:
                await app.bot.send_message(chat_id=int(uid), text=tasks[day])
                users[uid]["day"] += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è {uid}: {e}")
    save_json(USERS_FILE, users)

async def send_reminder():
    """–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 21:00 –ú–°–ö (18:00 UTC)."""
    users = load_json(USERS_FILE)
    global app
    for uid, info in users.items():
        day = info["day"]
        if day < len(load_json(TASKS_FILE)):
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –°–¥–µ–ª–∞–Ω–æ", callback_data="done"),
                InlineKeyboardButton("‚ùå –ù–µ —Å–¥–µ–ª–∞–Ω–æ", callback_data="skip")
            ]])
            try:
                await app.bot.send_message(
                    chat_id=int(uid),
                    text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã —Å–¥–µ–ª–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è {day}?",
                    reply_markup=kb
                )
            except Exception:
                pass

async def send_progress_report():
    """–û—Ç—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –¥–Ω–∏ 7, 14 –∏ 21 –≤ 09:05 –ú–°–ö (06:05 UTC)."""
    users = load_json(USERS_FILE)
    total = len(load_json(TASKS_FILE))
    global app
    for uid, info in users.items():
        day = info["day"]
        if day in (7, 14, 21):
            done = len(info["completed_days"])
            bar = "üü©" * done + "‚¨ú" * (total - done)
            try:
                await app.bot.send_message(
                    chat_id=int(uid),
                    text=f"–ò—Ç–æ–≥–∏ –∑–∞ {day} –¥–Ω–µ–π:\n{bar} {done}/{total}"
                )
            except Exception:
                pass

# -------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# -------------------------------------------------------------------
if __name__ == "__main__":
    # —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_task))
    app.add_handler(CommandHandler("progress", progress))
    app.add_handler(CommandHandler("goal", set_goal))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CallbackQueryHandler(answer_callback))

    # –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_daily, CronTrigger(hour=6,  minute=0))  # 09:00 –ú–°–ö
    scheduler.add_job(send_reminder, CronTrigger(hour=18, minute=0))  # 21:00 –ú–°–ö
    scheduler.add_job(send_progress_report, CronTrigger(hour=6, minute=5))  # 09:05 –ú–°–ö
    scheduler.start()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
    app.run_polling()
